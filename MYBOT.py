from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from yt_dlp import YoutubeDL
import os

        # –í–∞—à Telegram Bot Token
API_TOKEN = "7875828743:AAHCLeXP6j9zEEY2fc3GG_yyeIhHw9P6e_s"

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞ Bot —ñ Dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

        # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É 10 —Å—Ö–æ–∂–∏—Ö –∞—É–¥—ñ–æ—Ñ–∞–π–ª—ñ–≤
def search_audio(search_query):
            ydl_opts = {
                'format': 'bestaudio/best',
                'quiet': True,
            }

            results = []
            with YoutubeDL(ydl_opts) as ydl:
                # –ü–æ—à—É–∫ –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                info = ydl.extract_info(f"ytsearch10:{search_query}", download=False)
                for entry in info['entries']:
                    results.append({'title': entry['title'], 'webpage_url': entry['webpage_url'], 'uploader': entry['uploader']})
            return results

        # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –ø—ñ—Å–Ω—ñ
def download_audio(url):
            ydl_opts = {
                'format': 'bestaudio/best',
                'outtmpl': 'downloads/%(title)s.%(ext)s',
                'postprocessors': [{
                    'key': 'FFmpegExtractAudio',
                    'preferredcodec': 'mp3',
                    'preferredquality': '192',
                }],
                'quiet': True,
            }

            with YoutubeDL(ydl_opts) as ydl:
                info = ydl.extract_info(url, download=True)
                title = info['title']
                filepath = f"downloads/{title}.mp3"
                return filepath, title

        # –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
            await message.reply("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –∞–±–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")

        # –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø–∏—Ç—É
@dp.message_handler()
async def handle_message(message: types.Message):
            query = message.text
            results = search_audio(query)

            if not results:
                await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø—ñ—Å–Ω—ñ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.")
                return

            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            keyboard = types.InlineKeyboardMarkup()
            for result in results:
                button = types.InlineKeyboardButton(
                    text=f"{result['title']} (–≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å: {result['uploader']})",
                    callback_data=result['webpage_url']
                )
                keyboard.add(button)

            await message.reply("üîé –ó–Ω–∞–π–¥–µ–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –û–±–µ—Ä—ñ—Ç—å –ø—ñ—Å–Ω—é –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", reply_markup=keyboard)

        # –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø—ñ—Å–Ω—ñ
@dp.callback_query_handler(lambda callback_query: True)
async def handle_choice(callback_query: types.CallbackQuery):
            url = callback_query.data
            await callback_query.message.reply("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –≤–∏–±—Ä–∞–Ω—É –ø—ñ—Å–Ω—é, –∑–∞—á–µ–∫–∞–π—Ç–µ...")

            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ—ó –ø—ñ—Å–Ω—ñ
                filepath, title = download_audio(url)

                # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø—ñ—Å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ
                with open(filepath, 'rb') as audio:
                    await callback_query.message.reply_audio(audio, caption=f"üéµ {title}")

                # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ø—ñ—Å–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
                os.remove(filepath)
            except Exception as e:
                await callback_query.message.reply(f"‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
            if not os.path.exists("downloads"):
                os.mkdir("downloads")  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ
            executor.start_polling(dp, skip_updates=True)